// Generated by gencpp from file motion_planner/Local_path.msg
// DO NOT EDIT!


#ifndef MOTION_PLANNER_MESSAGE_LOCAL_PATH_H
#define MOTION_PLANNER_MESSAGE_LOCAL_PATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <motion_planner/State.h>

namespace motion_planner
{
template <class ContainerAllocator>
struct Local_path_
{
  typedef Local_path_<ContainerAllocator> Type;

  Local_path_()
    : header()
    , ref_state()
    , goal_pose()
    , goal_reached(false)  {
    }
  Local_path_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ref_state(_alloc)
    , goal_pose(_alloc)
    , goal_reached(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::motion_planner::State_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::motion_planner::State_<ContainerAllocator> >> _ref_state_type;
  _ref_state_type ref_state;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef uint8_t _goal_reached_type;
  _goal_reached_type goal_reached;





  typedef boost::shared_ptr< ::motion_planner::Local_path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_planner::Local_path_<ContainerAllocator> const> ConstPtr;

}; // struct Local_path_

typedef ::motion_planner::Local_path_<std::allocator<void> > Local_path;

typedef boost::shared_ptr< ::motion_planner::Local_path > Local_pathPtr;
typedef boost::shared_ptr< ::motion_planner::Local_path const> Local_pathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_planner::Local_path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_planner::Local_path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motion_planner::Local_path_<ContainerAllocator1> & lhs, const ::motion_planner::Local_path_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ref_state == rhs.ref_state &&
    lhs.goal_pose == rhs.goal_pose &&
    lhs.goal_reached == rhs.goal_reached;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motion_planner::Local_path_<ContainerAllocator1> & lhs, const ::motion_planner::Local_path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motion_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motion_planner::Local_path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_planner::Local_path_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_planner::Local_path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_planner::Local_path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_planner::Local_path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_planner::Local_path_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_planner::Local_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9e6cb19725f08d09811528c99d2a8f5";
  }

  static const char* value(const ::motion_planner::Local_path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9e6cb19725f08d0ULL;
  static const uint64_t static_value2 = 0x9811528c99d2a8f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_planner::Local_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_planner/Local_path";
  }

  static const char* value(const ::motion_planner::Local_path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_planner::Local_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"State[] ref_state\n"
"float32[] goal_pose\n"
"bool goal_reached\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: motion_planner/State\n"
"float32[] data\n"
;
  }

  static const char* value(const ::motion_planner::Local_path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_planner::Local_path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ref_state);
      stream.next(m.goal_pose);
      stream.next(m.goal_reached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Local_path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_planner::Local_path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_planner::Local_path_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ref_state[]" << std::endl;
    for (size_t i = 0; i < v.ref_state.size(); ++i)
    {
      s << indent << "  ref_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::motion_planner::State_<ContainerAllocator> >::stream(s, indent + "    ", v.ref_state[i]);
    }
    s << indent << "goal_pose[]" << std::endl;
    for (size_t i = 0; i < v.goal_pose.size(); ++i)
    {
      s << indent << "  goal_pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.goal_pose[i]);
    }
    s << indent << "goal_reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goal_reached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_PLANNER_MESSAGE_LOCAL_PATH_H
